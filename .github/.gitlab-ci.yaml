image: docker:latest

variables:
  # Harbor 주소
  REGISTRY: "192.168.2.140:443"

  # SonarQube
  SONAR_HOST_URL: "http://192.168.2.140:9000"
  SONAR_PROJECT_KEY: "bravo-itda"

stages:
  - detect
  - scan
  - build
  - push

# 1) 변경 사항 감지 스테이지
detect-changes:
  stage: detect
  script:
    - chmod +x detect_changes.sh
    - ./detect_changes.sh
  artifacts:
    paths:
      - changed_services.txt

# 2) SonarQube 스캔 스테이지
sonarqube-scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  needs: ["detect-changes"]
  script:
    - |
      # 만약 changed_services.txt가 비어있으면 스킵
      if [ ! -s changed_services.txt ]; then
        echo "No changes. Skipping SonarQube scan."
        exit 0
      fi

      # SonarQube 분석
      sonar-scanner \
        -Dsonar.projectKey=$SONAR_PROJECT_KEY \
        -Dsonar.sources=. \
        -Dsonar.host.url=$SONAR_HOST_URL \
        -Dsonar.login=$GITLAB_SONAR_TOKEN
  allow_failure: true

# 3) Docker 빌드 스테이지
build-image:
  stage: build
  needs: ["detect-changes", "sonarqube-scan"]
  script:
    - |
      if [ ! -s changed_services.txt ]; then
        echo "No changes detected. Skipping build."
        exit 0
      fi

      echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin "$REGISTRY"

      # changed_services.txt를 읽어서 서비스별로 빌드
      while read line; do
        # line 형식: "backend:auth-service" 또는 "frontend:bravo-front"
        TYPE=$(echo "$line" | cut -d':' -f1)
        NAME=$(echo "$line" | cut -d':' -f2)

        if [ "$TYPE" = "backend" ]; then
          # ex) auth-service 디렉토리에 있는 Dockerfile로 빌드
          SERVICE_DIR="Backend/Image/$NAME"
          # Harbor 리포지토리 예: "192.168.2.140:443/backend/itda-$NAME"
          IMAGE_NAME="$REGISTRY/backend/itda-$NAME:latest"

          echo "Building backend image for $NAME..."
          docker build -t "$IMAGE_NAME" "$SERVICE_DIR"

        elif [ "$TYPE" = "frontend" ]; then
          # ex) "Frontend/bravo-front" 디렉토리 빌드
          SERVICE_DIR="Frontend/bravo-front"
          # Harbor 리포지토리 예: "192.168.2.140:443/frontend/itda-ui"
          IMAGE_NAME="$REGISTRY/frontend/itda-ui:latest"

          echo "Building frontend image for $NAME..."
          docker build -t "$IMAGE_NAME" "$SERVICE_DIR"
        fi
      done < changed_services.txt

# 4) Docker 푸시 스테이지
push-image:
  stage: push
  needs: ["build-image"]
  script:
    - |
      if [ ! -s changed_services.txt ]; then
        echo "No changes detected. Skipping push."
        exit 0
      fi

      # 다시 로그인 (이미 로그인되어 있을 수도 있지만 안전하게)
      echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin "$REGISTRY"

      while read line; do
        TYPE=$(echo "$line" | cut -d':' -f1)
        NAME=$(echo "$line" | cut -d':' -f2)

        if [ "$TYPE" = "backend" ]; then
          IMAGE_NAME="$REGISTRY/backend/itda-$NAME:latest"
          echo "Pushing $IMAGE_NAME..."
          docker push "$IMAGE_NAME"
        elif [ "$TYPE" = "frontend" ]; then
          IMAGE_NAME="$REGISTRY/frontend/itda-ui:latest"
          echo "Pushing $IMAGE_NAME..."
          docker push "$IMAGE_NAME"
        fi
      done < changed_services.txt