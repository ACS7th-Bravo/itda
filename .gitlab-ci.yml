image: docker:latest

services:
  - name: docker:dind
    command: ["--insecure-registry=192.168.2.140:443"]

variables:
  DOCKER_TLS_CERTDIR: ""  # docker:dind 사용 시 TLS 인증 비활성화
  DOCKER_HOST: tcp://docker:2375
  REGISTRY: "192.168.2.140:443"
  SONAR_HOST_URL: "http://192.168.2.140:9000"
  SONAR_PROJECT_KEY: "bravo-itda"

stages:
  - detect
  - scan
  - build
  - push

# 1) 변경 사항 감지 스테이지
detect-changes:
  stage: detect
  script: |
    chmod +x detect_changes.sh
    sh detect_changes.sh
  artifacts:
    paths:
      - changed_services.txt

# 2) SonarQube 스캔 스테이지
sonarqube-scan:
  stage: scan
  image: node:18-alpine
  script: |
    set -e

    if [ ! -s changed_services.txt ]; then
      echo "No changes. Skipping SonarQube scan."
      exit 0
    fi

    # 프론트엔드 테스트 및 커버리지 리포트 생성
    if grep -q "^frontend:" changed_services.txt; then
      echo "Running tests for frontend..."
      cd Frontend/bravo-front
      npm install
      npm run test -- --coverage
      if [ -f coverage/lcov.info ]; then
        FRONTEND_COVERAGE="$(pwd)/coverage/lcov.info"
      else
        echo "Frontend coverage report not found!"
      fi
      cd ../../
    fi

    # 백엔드 테스트 및 커버리지 리포트 생성
    BACKEND_COVERAGE=""
    for service in $(grep "^backend:" changed_services.txt | cut -d':' -f2); do
      echo "Running tests for backend service: $service"
      cd Backend/Image/$service
      npm install
      npm run test -- --coverage
      if [ -f coverage/lcov.info ]; then
        COVERAGE_PATH="$(pwd)/coverage/lcov.info"
        if [ -z "$BACKEND_COVERAGE" ]; then
          BACKEND_COVERAGE="$COVERAGE_PATH"
        else
          BACKEND_COVERAGE="$BACKEND_COVERAGE,$COVERAGE_PATH"
        fi
      else
        echo "Coverage report for $service not found!"
      fi
      cd ../../..
    done

    echo "Frontend coverage: $FRONTEND_COVERAGE"
    echo "Backend coverage: $BACKEND_COVERAGE"

    # 커버리지 리포트 경로 결합
    COVERAGE_ARGS=""
    if [ -n "$FRONTEND_COVERAGE" ] && [ -n "$BACKEND_COVERAGE" ]; then
      COVERAGE_ARGS="$FRONTEND_COVERAGE,$BACKEND_COVERAGE"
    elif [ -n "$FRONTEND_COVERAGE" ]; then
      COVERAGE_ARGS="$FRONTEND_COVERAGE"
    elif [ -n "$BACKEND_COVERAGE" ]; then
      COVERAGE_ARGS="$BACKEND_COVERAGE"
    fi

    sonar-scanner \
      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      -Dsonar.sources=. \
      -Dsonar.exclusions=**/harbor/** \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.token=$GITLAB_SONAR_TOKEN \
      -Dsonar.javascript.lcov.reportPaths="$COVERAGE_ARGS"
  allow_failure: true


# 3) Docker 빌드 및 푸시 통합 스테이지
build-push:
  stage: push
  needs: ["detect-changes", "sonarqube-scan"]
  image: docker:latest
  script: |
    set -e
    if [ ! -s changed_services.txt ]; then
      echo "No changes detected. Skipping build and push."
      exit 0
    fi

    echo "=== Changed services content ==="
    cat changed_services.txt

    echo "=== Docker login to Harbor ==="
    echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin "$REGISTRY"

    while read line; do
      # 예상 형식: TYPE:FOLDER (예: backend:search-service 또는 frontend:Frontend/bravo-front/)
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)
      
      if [ "$TYPE" = "backend" ]; then
        SERVICE_DIR="Backend/Image/$NAME"
        # 이미지 태그는 "-service" 접미어 제거 (예: "search-service" -> "search")
        IMAGE_TAG="$NAME"
        if echo "$NAME" | grep -q -- '-service$'; then
          IMAGE_TAG=${NAME%-service}
        fi
        IMAGE_NAME="$REGISTRY/backend/itda-$IMAGE_TAG:latest"
        echo "Building backend image for $NAME (tag: $IMAGE_TAG) from $SERVICE_DIR..."
        docker build -t "$IMAGE_NAME" "$SERVICE_DIR"
        echo "Pushing $IMAGE_NAME..."
        docker push "$IMAGE_NAME"
      elif [ "$TYPE" = "frontend" ]; then
        SERVICE_DIR="Frontend/bravo-front"
        IMAGE_NAME="$REGISTRY/frontend/itda-ui:latest"
        echo "Building frontend image from $SERVICE_DIR..."
        docker build -t "$IMAGE_NAME" "$SERVICE_DIR"
        echo "Pushing $IMAGE_NAME..."
        docker push "$IMAGE_NAME"
      fi
    done < changed_services.txt