image: docker:latest

# EC2에서 로컬 Docker를 사용하므로 Docker-in-Docker 불필요
variables:
  DOCKER_HOST: "unix:///var/run/docker.sock"
  DOCKER_TLS_CERTDIR: ""

  # SonarQube 관련 (프로젝트별로 수정)
  SONAR_HOST_URL: "http://3.39.94.135:9000"
  SONAR_PROJECT_KEY: "bravo-itda"

  # ECR 주소 (예시: 655088038759.dkr.ecr.ap-northeast-2.amazonaws.com)
  REGISTRY: "655088038759.dkr.ecr.ap-northeast-2.amazonaws.com"

stages:
  - detect
  - scan
  - build
  - push

# 1) 변경 사항 감지
detect-changes:
  stage: detect
  script: |
    chmod +x detect_changes.sh
    sh detect_changes.sh
  artifacts:
    paths:
      - changed_services.txt

# 2) SonarQube 스캔
sonarqube-scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  needs: ["detect-changes"]
  script: |
    set -e
    # 변경사항 없으면 스캔 스킵
    if [ ! -s changed_services.txt ]; then
      echo "No changes. Skipping SonarQube scan."
      exit 0
    fi

    sonar-scanner \
      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      -Dsonar.sources=. \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.login=$GITLAB_SONAR_TOKEN
  allow_failure: false

# 3) Docker 빌드
build:
  stage: build
  needs: ["detect-changes", "sonarqube-scan"]
  image: docker:latest
  artifacts:
    paths:
      - changed_services.txt
  script: |
    set -e

    # 1. AWS CLI 설치
    if [ -f /etc/alpine-release ]; then
      echo "Alpine detected, installing awscli via apk"
      apk add --no-cache aws-cli
    else
      echo "Non-Alpine system, installing awscli via apt + pip"
      apt-get update -y
      apt-get install -y python3 python3-pip
      pip3 install awscli
    fi

    # 2. 변경사항 없으면 빌드 스킵
    if [ ! -s changed_services.txt ]; then
      echo "No changes detected. Skipping build."
      exit 0
    fi

    echo "=== Changed services content ==="
    cat changed_services.txt

    # 3. ECR 로그인
    aws ecr get-login-password --region "$AWS_REGION" \
      | docker login --username AWS --password-stdin "$REGISTRY"

    # 4. 변경된 서비스별로 이미지를 빌드
    while read line; do
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)

      if [ "$TYPE" = "backend" ]; then
        SERVICE_DIR="Backend/Image/$NAME"
        IMAGE_TAG_BASE="$NAME"
        if echo "$NAME" | grep -q -- '-service$'; then
          IMAGE_TAG_BASE=${NAME%-service}
        fi
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-$IMAGE_TAG_BASE:$IMAGE_TAG"

        echo "Building backend image for $NAME -> $FULL_IMAGE_NAME"
        docker build -t "$FULL_IMAGE_NAME" "$SERVICE_DIR"

      elif [ "$TYPE" = "frontend" ]; then
        SERVICE_DIR="Frontend/bravo-front"
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-ui:$IMAGE_TAG"

        echo "Building frontend image -> $FULL_IMAGE_NAME"
        docker build -t "$FULL_IMAGE_NAME" "$SERVICE_DIR"
      fi
    done < changed_services.txt

# 4) Docker 푸시
push:
  stage: push
  needs: ["build"]
  image: docker:latest
  script: |
    set -e
    if [ ! -s changed_services.txt ]; then
      echo "No changes detected. Skipping push."
      exit 0
    fi

    if [ -f /etc/alpine-release ]; then
      echo "Alpine detected, installing awscli via apk"
      apk add --no-cache aws-cli
    else
      echo "Non-Alpine system, installing awscli via apt + pip"
      apt-get update -y
      apt-get install -y python3 python3-pip
      pip3 install awscli
    fi

    echo "=== Docker login to ECR ==="
    aws ecr get-login-password --region "$AWS_REGION" \
      | docker login --username AWS --password-stdin "$REGISTRY"

    while read line; do
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)

      if [ "$TYPE" = "backend" ]; then
        IMAGE_TAG_BASE="$NAME"
        if echo "$NAME" | grep -q -- '-service$'; then
          IMAGE_TAG_BASE=${NAME%-service}
        fi
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-$IMAGE_TAG_BASE:$IMAGE_TAG"

        echo "Pushing image with commit tag: $FULL_IMAGE_NAME..."
        docker push "$FULL_IMAGE_NAME"

        # 추가: "latest" 태그도 함께 업데이트
        LATEST_IMAGE="$REGISTRY/itda-$IMAGE_TAG_BASE:latest"
        echo "Tagging as latest: $LATEST_IMAGE"
        docker tag "$FULL_IMAGE_NAME" "$LATEST_IMAGE"
        echo "Pushing image with latest tag: $LATEST_IMAGE..."
        docker push "$LATEST_IMAGE"

      elif [ "$TYPE" = "frontend" ]; then
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-ui:$IMAGE_TAG"

        echo "Pushing image with commit tag: $FULL_IMAGE_NAME..."
        docker push "$FULL_IMAGE_NAME"

        # 추가: "latest" 태그도 업데이트
        LATEST_IMAGE="$REGISTRY/itda-ui:latest"
        echo "Tagging as latest: $LATEST_IMAGE"
        docker tag "$FULL_IMAGE_NAME" "$LATEST_IMAGE"
        echo "Pushing image with latest tag: $LATEST_IMAGE..."
        docker push "$LATEST_IMAGE"
      fi
    done < changed_services.txt