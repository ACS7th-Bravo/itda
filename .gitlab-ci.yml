image: docker:latest

variables:
  DOCKER_HOST: "unix:///var/run/docker.sock"
  DOCKER_TLS_CERTDIR: ""

  # SonarQube 관련
  SONAR_HOST_URL: "http://3.39.94.135:9000"
  SONAR_PROJECT_KEY: "bravo-itda"

  # ECR 주소
  REGISTRY: "655088038759.dkr.ecr.ap-northeast-2.amazonaws.com"

stages:
  - detect
  - scan
  - build
  - push

# 1) 변경 사항 감지
detect-changes:
  stage: detect
  script: |
    chmod +x detect_changes.sh
    sh detect_changes.sh
  artifacts:
    paths:
      - changed_services.txt

# 2) SonarQube 스캔
sonarqube-scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  needs: ["detect-changes"]
  script: |
    set -e

    # 변경사항 없으면 스캔 스킵
    if [ ! -s changed_services.txt ]; then
      echo "변경 사항이 없어 SonarQube 분석을 건너뜁니다."
      exit 0
    fi

    # SonarQube 분석 실행
    sonar-scanner \
      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      -Dsonar.sources=. \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.login=$GITLAB_SONAR_TOKEN

    # $? : 직전 명령(sonar-scanner)의 종료 코드
    # 0이면 성공, 그 외는 실패
    if [ $? -eq 0 ]; then
      echo "SonarQube 분석 성공"
      # SonarQube 분석 '성공' Slack 알림
      curl -X POST -H "Content-type: application/json" \
        --data '{"text": "SonarQube 코드 분석에 성공했습니다.\n커밋 해시: '"$CI_COMMIT_SHORT_SHA"'"}' \
        "https://hooks.slack.com/services/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"
    else
      echo "SonarQube 분석 실패"
      # SonarQube 분석 '실패' Slack 알림
      curl -X POST -H "Content-type: application/json" \
        --data '{"text": "SonarQube 코드 분석에 실패했습니다.\n커밋 해시: '"$CI_COMMIT_SHORT_SHA"'"}' \
        "https://hooks.slack.com/services/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"
      exit 1
    fi
  allow_failure: false

# 3) Docker 빌드
build:
  stage: build
  needs: ["detect-changes", "sonarqube-scan"]
  image: docker:latest
  artifacts:
    paths:
      - changed_services.txt
  script: |
    set -e

    # AWS CLI 설치
    if [ -f /etc/alpine-release ]; then
      echo "Alpine 기반, apk로 awscli 설치"
      apk add --no-cache aws-cli
    else
      echo "Debian/Ubuntu 기반, apt + pip로 awscli 설치"
      apt-get update -y
      apt-get install -y python3 python3-pip
      pip3 install awscli
    fi

    # 변경사항 없으면 빌드 스킵
    if [ ! -s changed_services.txt ]; then
      echo "변경 사항이 없어 Docker 빌드를 건너뜁니다."
      exit 0
    fi

    echo "=== 변경된 서비스 목록 ==="
    cat changed_services.txt

    # ECR 로그인
    aws ecr get-login-password --region "$AWS_REGION" \
      | docker login --username AWS --password-stdin "$REGISTRY"

    # 변경된 서비스별로 Docker 이미지 빌드
    while read line; do
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)

      if [ "$TYPE" = "backend" ]; then
        SERVICE_DIR="Backend/Image/$NAME"
        IMAGE_TAG_BASE="$NAME"
        if echo "$NAME" | grep -q -- '-service$'; then
          IMAGE_TAG_BASE=${NAME%-service}
        fi
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-$IMAGE_TAG_BASE:$IMAGE_TAG"

        echo "빌드 시작: $FULL_IMAGE_NAME"
        docker build -t "$FULL_IMAGE_NAME" "$SERVICE_DIR"

      elif [ "$TYPE" = "frontend" ]; then
        SERVICE_DIR="Frontend/bravo-front"
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-ui:$IMAGE_TAG"

        echo "빌드 시작: $FULL_IMAGE_NAME"
        docker build -t "$FULL_IMAGE_NAME" "$SERVICE_DIR"
      fi
    done < changed_services.txt

# 4) Docker 푸시
push:
  stage: push
  needs: ["build"]
  image: docker:latest
  script: |
    set -e
    if [ ! -s changed_services.txt ]; then
      echo "변경 사항이 없어 Docker 푸시를 건너뜁니다."
      exit 0
    fi

    # AWS CLI 설치
    if [ -f /etc/alpine-release ]; then
      echo "Alpine 기반, apk로 awscli 설치"
      apk add --no-cache aws-cli curl  # curl 설치 추가
    else
      echo "Debian/Ubuntu 기반, apt + pip로 awscli 설치"
      apt-get update -y
      apt-get install -y python3 python3-pip curl
      pip3 install awscli
    fi

    echo "=== ECR 로그인 ==="
    aws ecr get-login-password --region "$AWS_REGION" \
      | docker login --username AWS --password-stdin "$REGISTRY"

    while read line; do
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)

      if [ "$TYPE" = "backend" ]; then
        IMAGE_TAG_BASE="$NAME"
        if echo "$NAME" | grep -q -- '-service$'; then
          IMAGE_TAG_BASE=${NAME%-service}
        fi
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-$IMAGE_TAG_BASE:$IMAGE_TAG"

        echo "푸시 시작: $FULL_IMAGE_NAME"
        docker push "$FULL_IMAGE_NAME"

        LATEST_IMAGE="$REGISTRY/itda-$IMAGE_TAG_BASE:latest"
        echo "Tagging as latest: $LATEST_IMAGE"
        docker tag "$FULL_IMAGE_NAME" "$LATEST_IMAGE"
        echo "푸시 시작: $LATEST_IMAGE"
        docker push "$LATEST_IMAGE"

      elif [ "$TYPE" = "frontend" ]; then
        IMAGE_TAG="$CI_COMMIT_SHORT_SHA"
        FULL_IMAGE_NAME="$REGISTRY/itda-ui:$IMAGE_TAG"

        echo "푸시 시작: $FULL_IMAGE_NAME"
        docker push "$FULL_IMAGE_NAME"

        LATEST_IMAGE="$REGISTRY/itda-ui:latest"
        echo "Tagging as latest: $LATEST_IMAGE"
        docker tag "$FULL_IMAGE_NAME" "$LATEST_IMAGE"
        echo "푸시 시작: $LATEST_IMAGE"
        docker push "$LATEST_IMAGE"
      fi
    done < changed_services.txt

    # Slack 알림 전송을 위한 curl 설치는 위에서 이미 진행됨.
    # ECR 이미지 푸시 성공 시 Slack 알림 (WebHook B)
    curl -X POST -H "Content-type: application/json" \
      --data '{"text": "ECR 이미지 푸시에 성공했습니다.\n커밋 해시: '"$CI_COMMIT_SHORT_SHA"'"}' \
      "https://hooks.slack.com/services/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"
  allow_failure: false