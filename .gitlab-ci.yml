image: docker:latest

services:
  - name: docker:dind
    command: ["--insecure-registry=192.168.2.140:443"]

variables:
  DOCKER_TLS_CERTDIR: ""  # docker:dind 사용 시 TLS 인증 비활성화
  DOCKER_HOST: tcp://docker:2375
  REGISTRY: "192.168.2.140:443"
  SONAR_HOST_URL: "http://192.168.2.140:9000"
  SONAR_PROJECT_KEY: "bravo-itda"

stages:
  - detect
  - scan
  - build
  - push

# 1) 변경 사항 감지 스테이지
detect-changes:
  stage: detect
  script: |
    chmod +x detect_changes.sh
    sh detect_changes.sh
  artifacts:
    paths:
      - changed_services.txt

# 2) SonarQube 스캔 스테이지
sonarqube-scan:
  stage: scan
  image: sonarsource/sonar-scanner-cli:latest
  needs: ["detect-changes"]
  script: |
    set -e
    if [ ! -s changed_services.txt ]; then
      echo "No changes. Skipping SonarQube scan."
      exit 0
    fi

    sonar-scanner \
      -Dsonar.projectKey=$SONAR_PROJECT_KEY \
      -Dsonar.sources=. \
      -Dsonar.exclusions=**/harbor/** \
      -Dsonar.host.url=$SONAR_HOST_URL \
      -Dsonar.login=$GITLAB_SONAR_TOKEN
  allow_failure: true

# 3) Docker 빌드 및 푸시 통합 스테이지
build-push:
  stage: push
  needs: ["detect-changes", "sonarqube-scan"]
  image: docker:latest
  script: |
    set -e
    if [ ! -s changed_services.txt ]; then
      echo "No changes detected. Skipping build and push."
      exit 0
    fi

    echo "=== Changed services content ==="
    cat changed_services.txt

    echo "=== Docker login to Harbor ==="
    echo "$HARBOR_PASSWORD" | docker login -u "$HARBOR_USERNAME" --password-stdin "$REGISTRY"

    while read line; do
      TYPE=$(echo "$line" | cut -d':' -f1)
      NAME=$(echo "$line" | cut -d':' -f2)
      
      if [ "$TYPE" = "backend" ]; then
        SERVICE_DIR="Backend/Image/$NAME"
        IMAGE_NAME="$REGISTRY/backend/itda-$NAME:latest"
        echo "Building backend image for $NAME from $SERVICE_DIR..."
        docker build -t "$IMAGE_NAME" "$SERVICE_DIR"
        echo "Pushing $IMAGE_NAME..."
        docker push "$IMAGE_NAME"
      elif [ "$TYPE" = "frontend" ]; then
        SERVICE_DIR="Frontend/bravo-front"
        IMAGE_NAME="$REGISTRY/frontend/itda-ui:latest"
        echo "Building frontend image for $NAME from $SERVICE_DIR..."
        docker build -t "$IMAGE_NAME" "$SERVICE_DIR"
        echo "Pushing $IMAGE_NAME..."
        docker push "$IMAGE_NAME"
      fi
    done < changed_services.txt