apiVersion: v1
kind: ConfigMap
metadata:
  name: api-gateway-config
  namespace: itda-fe-ns
data:
  nginx.conf: |
    events {}
    http {
      upstream auth_backend {
        server itda-auth.itda-be-ns.svc.cluster.local:3001;
      }
      upstream search_backend {
        server itda-search.itda-be-ns.svc.cluster.local:3002;
      }
      upstream lyrics_backend {
        server itda-lyrics.itda-be-ns.svc.cluster.local:3003;
      }
      upstream translation_backend {
        server itda-translation.itda-be-ns.svc.cluster.local:3004;
      }
      upstream playlist_backend {
        server itda-playlist.itda-be-ns.svc.cluster.local:3005;
      }

      server {
        listen 80;

        # 모든 응답에 대해 공통 CORS 헤더 추가
        add_header 'Access-Control-Allow-Origin' '*' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;

        # 공통 OPTIONS 요청 처리 (이 블록은 구체적인 location보다 우선순위가 낮을 수 있으므로, 각 location에 별도 처리가 필요)
        location /api/ {
          if ($request_method = OPTIONS) {
            return 204;
          }
        }

        location /api/google {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://auth_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/spotify {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://search_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/youtube {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://search_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/track {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://search_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/playlist {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://playlist_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/lyrics {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://lyrics_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }

        location /api/translate {
          if ($request_method = OPTIONS) {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, Accept, ngrok-skip-browser-warning' always;
            add_header 'Content-Length' 0;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            return 204;
          }
          proxy_pass http://translation_backend;
          proxy_next_upstream error timeout invalid_header http_502 http_503;
        }
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: itda-fe-ns
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
        - name: api-gateway
          image: nginx:stable-alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: api-gateway-config

---

apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: itda-fe-ns
spec:
  selector:
    app: api-gateway
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer
  loadBalancerIP: 192.168.56.192  # 원하는 고정 IP 설정



