---
# 1. 인그레스 컨트롤러에 대한 외부 접근 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-controller-allow-ingress
  namespace: ingress-nginx
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: ingress-nginx
  policyTypes:
    - Ingress
  ingress:
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
---
# 2. 인그레스 컨트롤러가 프론트엔드로 트래픽 전달 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: frontend-allow-ingress-from-ingress
  namespace: itda-fe-ns
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: ingress-nginx
          podSelector: {}
        - ipBlock:
            cidr: 192.168.56.0/24
---
# 3. 인그레스 컨트롤러에서 프론트엔드로 송신 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: ingress-allow-egress-to-frontend
  namespace: ingress-nginx
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: itda-fe-ns
---
# 4. 프론트엔드 기본 정책 - 모든 트래픽 차단
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-frontend
  namespace: itda-fe-ns
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# 5. 프론트엔드에서 백엔드로 송신 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-frontend-egress-backend
  namespace: itda-fe-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: itda-be-ns
---
# 7. 백엔드 기본 정책 - 모든 트래픽 차단
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-backend
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# 8. 백엔드에서 프론트엔드 수신 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-ingress-from-frontend
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: itda-fe-ns
---
# 9. 백엔드에서 외부 API 접근 허용 (스포티파이, 유튜브 API 등)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-egress-to-external-apis
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
            except:
              - 10.0.0.0/8
              - 172.16.0.0/12
              - 192.168.0.0/16
      ports:
        - protocol: TCP
          port: 443 # HTTPS
        - protocol: TCP
          port: 80  # HTTP
---
# 10. 백엔드에서 외부 MongoDB 서버 접근 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-egress-to-mongodb
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - ipBlock:
            cidr: 192.168.2.137/32
      ports:
        - protocol: TCP
          port: 27017 # MongoDB 기본 포트
    - to:
        - ipBlock:
            cidr: 192.168.2.138/32
      ports:
        - protocol: TCP
          port: 27017 # MongoDB 기본 포트
    - to:
        - ipBlock:
            cidr: 192.168.2.139/32
      ports:
        - protocol: TCP
          port: 27017 # MongoDB 기본 포트
---
# 11. 레디스 기본 정책 - 모든 트래픽 차단
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-all-redis
  namespace: itda-redis-ns
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
---
# 12. 백엔드에서 레디스로 송신 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-backend-egress-to-redis
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: itda-redis-ns
      ports:
        - protocol: TCP
          port: 6379 # Redis 기본 포트
---
# 13. 레디스에서 백엔드 수신 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-redis-ingress-from-backend
  namespace: itda-redis-ns
spec:
  podSelector:
    matchLabels:
      app: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: itda-be-ns
      ports:
        - protocol: TCP
          port: 6379 # Redis 기본 포트
---
# 14. 백엔드 DNS 조회 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress
  namespace: itda-be-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
---
# 15. 프론트엔드 DNS 조회 허용
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-dns-egress
  namespace: itda-fe-ns
spec:
  podSelector: {}
  policyTypes:
    - Egress
  egress:
    - to:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels:
              k8s-app: kube-dns
      ports:
        - protocol: UDP
          port: 53
        - protocol: TCP
          port: 53
